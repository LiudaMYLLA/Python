import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Завантаження даних
titanic_data = pd.read_csv('titanic.csv')

# Перевірка перших кількох записів датасету
print(titanic_data.head())

#task 1
print("\n=== Task 1 ===")
# Виведення статистичної інформації за числовими змінними
print(titanic_data.describe())
# Виведення розмірності датасету
print(titanic_data.shape)
# Перевірка типів даних і кількість непорожніх значень
print(titanic_data.info())

#task 2
print("\n=== Task 2 ===")
# Визначення кількості пропущених значень по кожному атрибуту
missing_values = titanic_data.isnull().sum()
# Виведення результату
print(missing_values)

#task 3
print("\n=== Task 3 ===")
# Кодування категорійних змінних 'Sex' та створення dummy змінних для 'Embarked'
titanic_data['Sex'] = titanic_data['Sex'].map({'male': 1, 'female': 0})
embarked_dummies = pd.get_dummies(titanic_data['Embarked'], prefix='Embarked')
titanic_data = pd.concat([titanic_data, embarked_dummies], axis=1)
titanic_data.drop('Embarked', axis=1, inplace=True)

# Обчислення матриці кореляцій
correlation_matrix = titanic_data.select_dtypes(include=[np.number]).corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm', cbar=True)
plt.title('Матриця кореляцій за методом Пірсона')
plt.show()

#task 4
print("\n=== Task 4 ===")
def fill_missing_with_median_by_group(df, column_name, group_columns):
    medians = df.groupby(group_columns)[column_name].median()
    def fill_median(row):
        if pd.isna(row[column_name]):
            return medians[row[group_columns]]
        else:
            return row[column_name]
    df[column_name] = df.apply(fill_median, axis=1)
    return df

updated_titanic = fill_missing_with_median_by_group(titanic_data, 'Age', ['Pclass', 'Sex'])
missing_values_after = updated_titanic.isnull().sum()
print(missing_values_after)

#task 5
print("\n=== Task 5 ===")
survival_by_age_group = titanic_data.groupby('Age_bin')['Survived'].sum()
plt.figure(figsize=(10, 6))
sns.barplot(x=survival_by_age_group.index, y=survival_by_age_group.values)
plt.title('Кількість виживших за віковими групами')
plt.xlabel('Вікова група')
plt.ylabel('Кількість виживших')
plt.show()

#task 6
print("\n=== Task 6 ===")
survival_by_fare = titanic_data.groupby('Fare_bin')['Survived'].sum()
plt.figure(figsize=(10, 6))
sns.barplot(x=survival_by_fare.index, y=survival_by_fare.values)
plt.title('Кількість виживших за квартильними категоріями Fare')
plt.xlabel('Категорія Fare')
plt.ylabel('Кількість виживших')
plt.xticks(ticks=[0, 1, 2, 3], labels=['1-й квартиль', '2-й квартиль', '3-й квартиль', '4-й квартиль'])
plt.show()

#task 7
print("\n=== Task 7 ===")
plt.figure(figsize=(10, 6))
sns.barplot(x='Family_size', y='Survived', data=titanic_data)
plt.title('Вплив розміру сімї на виживання')
plt.xlabel('Розмір сімї')
plt.ylabel('Частка виживших')
plt.show()

#task 8
print("\n=== Task 8 ===")
titanic_data.drop(['Cabin', 'Ticket', 'Name'], axis=1, inplace=True)
print(titanic_data.head())

#task 9
print("\n=== Task 9 ===")
titanic_data['Title'] = titanic_data['Name'].str.extract(r' ([A-Za-z]+)\.', expand=False)
title_mapping = {"Mr": 1, "Miss": 2, "Mrs": 3, "Master": 4, "Dr": 5, "Rev": 6, "Major": 7, "Col": 8, "Mlle": 9, "Countess": 10, "Ms": 11, "Lady": 12, "Jonkheer": 13, "Don": 14, "Dona": 15, "Mme": 16, "Capt": 17, "Sir": 18}
titanic_data['Title'] = titanic_data['Title'].map(title_mapping)
titanic_data['Title'] = titanic_data['Title'].fillna(0)
titanic_data = pd.get_dummies(titanic_data, columns=['Embarked'])
print(titanic_data.head())

#task 10
print("\n=== Task 10 ===")
# Екстракція та кодування 'Title'
titanic_data['Title'] = titanic_data['Name'].str.extract(r' ([A-Za-z]+)\.', expand=False)
title_mapping = {"Mr": 1, "Miss": 2, "Mrs": 3, "Master": 4, "Dr": 5, "Rev": 6, "Major": 7, "Col": 8, "Mlle": 9, "Countess": 10, "Ms": 11, "Lady": 12, "Jonkheer": 13, "Don": 14, "Dona": 15, "Mme": 16, "Capt": 17, "Sir": 18}
titanic_data['Title'] = titanic_data['Title'].map(title_mapping)
titanic_data['Title'] = titanic_data['Title'].fillna(0)  # Заповнення пропущених значень

# Кодування 'Embarked'
titanic_data = pd.get_dummies(titanic_data, columns=['Embarked'], drop_first=True)

# Перевірка результатів
print(titanic_data.head())

#task 11
print("\n=== Task 11 ===")
# Побудова гістограм для кожної числової змінної
plt.figure(figsize=(15, 10))
numeric_vars = ['Age', 'Fare', 'Parch', 'SibSp', 'Family_size']
for i, var in enumerate(numeric_vars):
    plt.subplot(3, 2, i + 1)
    plt.hist(titanic_data[var].dropna(), bins=20, color='blue', alpha=0.7)
    plt.title(f'Гістограма змінної {var}')
    plt.xlabel(var)
    plt.ylabel('Кількість')
plt.tight_layout()
plt.show()

#task 12
print("\n=== Task 12 ===")
# Побудова парних графіків розсіювання
sns.pairplot(titanic_data[numeric_vars], plot_kws={'alpha':0.2})
plt.show()
